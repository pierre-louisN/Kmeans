// moyenne donne le centre de gravité où doit se mettre le référent (lorsqu'il se met à jour)

/*Fonctionnement algorithme Kmeans :
  1. Initialisation => choisir k centroids (c1,...,ck) et créer k clusters vide (Cl1, ..., Clk)
  2. Répéter la phase de calcul des distances et de maj des centre {
    Pour chaque ligne de donnée de R :
      1) calculer les distances au centroids (d1, ..., dk)
      2) mettre c1 dans le cluster Cl correspondant à la distance dmin
    mettre à jour les centroids de chaque cluster (en regardant la moyenne des distances des points du cluster)
  } jusqu'a notre condition d'arrêt (distance ne varie plus) => utiliser fonction arrêt() (plusieurs possibilités*)
  3. On renvoie les clusters
  4. On évalue à partir des classes (fonction évaluer(K, Clusters, Classe) )
  => calculer un pourcentage de la classe majoritaire de chaque cluster, et les erreurs, ensuite erreur/total (nombre de données) donne le taux d'erreur pour chaque cluster puis au total
 */

/* fonction arret () : on s'arrete si
1) nb iterations >= MAX
2) aucun changements dans les clusters
3) le delta de chaque centroids est faible (= les centroids ont très peu bougé), "faible" est relatif aux données
 */

/*
 => calculer un pourcentage de la classe majoritaire de chaque cluster, et les erreurs,
 ensuite erreur/total (nombre de données) donne le taux d'erreur pour chaque cluster puis au total
 */

 // l'algo doit renvoyer un tableau d'int avec (1,2,3) par exemple si il y a 3 clusters avec la valeur correspondant au numéro du cluster du tuple d'indice i